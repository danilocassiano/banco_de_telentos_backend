version: '3.8'
services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./data/elasticsearch:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - core
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.2
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - core

  postgres:
    image: postgres:15
    container_name: postgres_container
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: psicologia
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - core
    restart: unless-stopped

  adminer:
    image: adminer
    container_name: adminer_container
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - core

  backend:
    build:
      context: .  # Caminho para o diretório onde está o Dockerfile
      dockerfile: Dockerfile
    ports:
      - "3000:3000"  # Mapeia a porta 3000 do host para a porta 3000 do contêiner
    volumes:
      - .:/app  # Monta o diretório atual no contêiner
    environment:
      NODE_ENV: production

networks:
  core:
    driver: bridge
